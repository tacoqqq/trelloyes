{"version":3,"sources":["store.js","Card.js","List.js","App.js","serviceWorker.js","index.js"],"names":["STORE","lists","id","header","cardIds","allCards","title","content","Card","props","className","onClick","onDeleteCard","type","List","cards","map","card","key","onAddCard","newRandomCard","Math","random","toString","substring","App","state","store","handleAddCard","listid","newCard","list","push","setState","handleDeleteCard","cardId","console","log","newLists","filter","allList","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4761396a.chunk.js","sourcesContent":["\n\nconst STORE = {\n    lists: [\n      {\n        id: '1',\n        header: 'First list',\n        cardIds: [ 'a', 'b', 'e', 'f', 'g', 'j', 'l', 'm' ],\n      },\n      {\n        id: '2',\n        header: 'Second list',\n        cardIds: ['b', 'c', 'd', 'f', 'h', 'i', 'k'],\n      },\n      {\n        id: '3',\n        header: 'Third list',\n        cardIds: [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm' ],\n      },\n      {\n        id: '4',\n        header: 'Fourth list',\n        cardIds: [ 'l', 'm' ],\n      },\n    ],\n    allCards: {\n      'a': { id: 'a', title: 'First card', content: 'lorem ipsum' },\n      'b': { id: 'b', title: 'Second card', content: 'lorem ipsum' },\n      'c': { id: 'c', title: 'Third card', content: 'lorem ipsum' },\n      'd': { id: 'd', title: 'Fourth card', content: 'lorem ipsum' },\n      'e': { id: 'e', title: 'Fifth card', content: 'lorem ipsum' },\n      'f': { id: 'f', title: 'Sixth card', content: 'lorem ipsum' },\n      'g': { id: 'g', title: 'Seventh card', content: 'lorem ipsum' },\n      'h': { id: 'h', title: 'Eighth card', content: 'lorem ipsum' },\n      'i': { id: 'i', title: 'Ninth card', content: 'lorem ipsum' },\n      'j': { id: 'j', title: 'Tenth card', content: 'lorem ipsum' },\n      'k': { id: 'k', title: 'Eleventh card', content: 'lorem ipsum' },\n      'l': { id: 'l', title: 'Twelfth card', content: 'lorem ipsum' },\n      'm': { id: 'm', title: 'Thirteenth card', content: 'lorem ipsum' },\n    },\n  }\n\n  export default STORE;","import React from 'react';\nimport './Card.css';\n\n\nfunction Card(props) {\n    return (\n        <div className='Card'>\n            <button \n                onClick={ () => props.onDeleteCard(props.id)} \n                type='button'\n            >\n                delete\n            </button>\n            <h3>{props.title}</h3>\n            <p>{props.content}</p>\n        </div>\n    );\n}\n\n\n\nexport default Card;","import React from 'react';\nimport './List.css';\nimport Card from './Card.js';\n\n\n\nfunction List(props){\n\n    const allCards = props.cards ? props.cards:[]\n\n    \n    return (\n        <section className='List'>\n            <header className='List-header'>\n                <h2>{props.header}</h2>\n            </header>\n            <div className='List-cards'>\n                {allCards.map(card => \n                    <Card \n                        key={card.id}\n                        id={card.id}\n                        title={card.title} \n                        content={card.content}\n                        onDeleteCard={props.onDeleteCard}\n                    />\n                )}\n                <button \n                    onClick={() => props.onAddCard(props.id)} \n                    type=\"button\" \n                    className=\"List-add-button\"\n                >\n                    + Add Random Card\n                </button>\n            </div>\n\n        </section>\n    );\n}\n\n\nexport default List;","import React from 'react';\nimport List from './List.js';\nimport './App.css';\nimport STORE from './store.js';\n\n\nconst newRandomCard = () => {\n  const id = Math.random().toString(36).substring(2, 4)\n    + Math.random().toString(36).substring(2, 4);\n  return {\n    id: id,\n    title: `Random Card ${id}`,\n    content: 'lorem ipsum',\n  }\n}\n\nfunction omit(obj, keyToOmit) {\n  return Object.entries(obj).reduce(\n    (newObj, [key, value]) =>\n        key === keyToOmit ? newObj : {...newObj, [key]: value},\n    {}\n  );\n}\n\nclass App extends React.Component {\n\n  state = {\n    store: STORE\n  }\n\n\n  handleAddCard = (listid) => {\n    const newCard = newRandomCard()\n    const allCards = this.state.store.allCards\n    const lists = this.state.store.lists\n    \n    lists.map(list => {\n      if (listid === list.id) {\n        list.cardIds.push(newCard.id)\n        allCards[newCard.id] = newCard\n      }}\n    )\n    this.setState({\n      store: STORE\n    })\n  }\n\n  handleDeleteCard = (cardId) => {\n    console.log('handleDeleteCard clicked', {cardId})\n    const lists = this.state.store.lists\n    const allCards = this.state.store.allCards\n    \n    const newLists = lists.map(list => ({ \n      ...list,\n      cardIds: list.cardIds.filter(id => id != cardId)\n    }))\n\n    console.log(newLists)\n\n    //const newCards = omit(allCards, cardId)\n\n    this.setState({\n      store: {\n        lists: newLists\n      }\n    })\n\n  }\n    \n\n  render(){\n    const allList = this.state.store.lists ? this.state.store.lists:[]\n    return (\n      <main className='App'>\n        <header className='App-header'>\n          <h1>Trelloyes!</h1>\n        </header>\n        <div className='App-list'>\n          {allList.map(list => \n            <List \n              key={list.id} \n              id={list.id}\n              header={list.header} \n              cards={list.cardIds.map(id => this.state.store.allCards[id])}\n              onAddCard={this.handleAddCard}\n              onDeleteCard={this.handleDeleteCard}\n            />)}\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport STORE from './store.js'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}